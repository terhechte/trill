type MetaType = *Void
type FieldMetadata = *Void

type Mirror {
  let _metadata: MetaType
  let value: Any

  init(reflecting value: Any) {
    self._metadata = typeOf(value)
    self.value = value
  }

  init(reflectingType typeMeta: *Void) {
    self._metadata = typeMeta
  }

  func name() -> *Int8 {
    return trill_getTypeName(self._metadata)
  }

  func sizeInBits() -> Int {
    return trill_getTypeSizeInBits(self._metadata) as Int
  }

  func isReferenceType() -> Bool {
    return trill_isReferenceType(self._metadata) != 0
  }

  func child(_ index: Int) -> Any {
    return trill_extractAnyField(self.value, index as UInt)
  }

  func set(value: Any, forChild index: Int) {
    trill_updateAny(self.value, index as UInt, value)
  }

  func set(value: Any, forKey name: *Int8) {
    for var i = 0; i < self.numberOfFields(); i += 1 {
      if strcmp(self.field(at: i).name(), name) == 0 {
        self.set(value: value, forChild: i)
        return
      }
    }
    trill_fatalError("could not set value for unknown child")
  }

  func print() {
    if (self._metadata == nil) {
      puts("Metadata is null!\n");
      return;
    }
    printf("Metadata for type %s (size: %d):\n", self.name(), self.sizeInBits());
    for var i = 0; i < self.numberOfFields(); i += 1 {
      let field = self.field(at: i)
      printf("â”” ")
      let name = field.name()
      printf("(offset %d) ", field.offset())
      if name != nil {
        printf("%s: ", name)
      }
      printf("%s\n", field.typeMetadata().name());

      println(self.child(i))
    }
  }

  func field(at index: Int) -> FieldMirror {
    return FieldMirror(reflecting: trill_getFieldMetadata(self._metadata, index as UInt))
  }
  func numberOfFields() -> Int {
    return trill_getNumFields(self._metadata) as Int
  }
}

type FieldMirror {
  let _metadata: FieldMetadata
  init(reflecting field: FieldMetadata) {
    self._metadata = field
  }
  func name() -> *Int8 {
    return trill_getFieldName(self._metadata)
  }
  func typeMetadata() -> Mirror {
    return Mirror(reflectingType: trill_getFieldType(self._metadata))
  }
  func offset() -> Int {
    return trill_getFieldOffset(self._metadata)
  }
}
